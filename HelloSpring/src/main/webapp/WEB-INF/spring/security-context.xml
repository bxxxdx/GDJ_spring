<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 
		단방향 암호화처리를 하는 클래스를 bean 등록 
		BCryptPasswordEncoder 클래스 이용 -> 얘도 마찬가지로 hash알고리즘을 이용해서 처리한다.
		SHA512 방식에서는 암호화 된 비밀번호를 보고 기존 비밀번호를 유추할 수 있었다.
		
		BCrtpt 방식에서는 특정한 sort값을 줘서 예를들어 비밀번호가 똑같이 1234여도 AZOA 혹은 ZAOA 이런식으로 나온다.
		이런 부분을 해결하기 위해 sort값을 해독해주는 match method 또한 제공한다.
		결국 match method를 통해 같아 달라 정도까지 확인이 가능해진다.
	-->
	<bean id="bcryptPassword" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- 클라이언트 요청에 대한 인증처리하는 설정 -->
	<!-- http 요청이 들어왔을 때는 설정에 대해서 처리해라~ -->
	<!-- 
		pattern(/**) : 모든 주소(패턴)에서 인증을 받아야 한다.
		hasRole('ROLE_USER') : 일반 사용자에 대한
	 -->
	<security:http auto-config="true">
		<!-- 
			로그인처리하는 로직에 대한 설정
			username-parameter : 로그인처리값 중 id값을 받아오는 이름(name속성명)
			password-parameter : 로그인처리값 중 password값을 받아오는 이름(name속성명)
			default-target-url : 로그인 성공시 기본으로 연결되는 페이지  
			login-page : 기본 로그인페이지가 아닌 생성한 페이지로 이동할 때 사용
			authentication-failure-forword-url : 인증성공시 연결되는 페이지 주소
			authentication-failure-forward-url : 인증실패시 연결되는 페이지 주소
			login-processing-url : 로그인 로직처리시 실행할 메소드 지정
			
		-->
		<security:form-login 
					login-page="/member/loginpage.do"
					username-parameter="userId" 
					password-parameter="password" 
					default-target-url="/"
					authentication-failure-forward-url="/error.do"
					authentication-success-forward-url="/successLogin.do"
		/>
		<security:csrf disabled="true"/>
		<!--  인증을 받아야하는 주소를 등록하기  -->
		<security:intercept-url pattern="/" access="permitAll()"/>
		<security:intercept-url pattern="/resources/**" access="permitAll()"/>
		<security:intercept-url pattern="/member/loginpage.do" access="permitAll()"/>
		<security:intercept-url pattern="/member/enrollMember.do" access="permitAll()"/>
		<security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
		
		<!-- 로그아웃 처리하기 -->
		<security:logout logout-url="/logout" logout-success-url="/"/>
		
		<!-- 권한에 맞지 않는 주소에 접근했을 때 -->
		<security:access-denied-handler error-page="/WEB-INF/views/error/adminError.jsp"/>
		
	</security:http>
	
	<!-- 
		인증받을 방법에 대한 설정
		1. inmemory xml에 내부에 인증받을 수 있는 아이디, 패스워드를 저장해놓은 것
		2. 
	 -->
	 
	<security:authentication-manager>
		<!-- <security:authentication-provider>
			<security:user-service>
			<security:user name="admin" authorities="ROLE_USER" password="$2a$10$xO8dOY10RETwqca/bVAYreLRZXz03jGpLWW4x5uo1sriqk/fWvGme"/>
			</security:user-service>
			<security:password-encoder ref="bcryptPassword"/>
		</security:authentication-provider> -->
		<!-- 
			DB와 연동하여 인증처리하는 provider 제공하기,
			1. 인증한 내용을 저장할 클래스를 생성 -> User(클래스), UserDetails 인터페이스를 구현
			2. 인증을 처리하는 service를 구현해 줌 -> UserDetailService 인터페이스 구현
			
			3. security:authentication-provider를 이용해서 service 설정을 해줌
			ex. context:component-scan을 bean에 등록해놓고 springbean을 가져오게 설정하기
		 -->
		 <security:authentication-provider user-service-ref="loginService">
		 	<security:password-encoder ref="bcryptPassword"/>
		 </security:authentication-provider> 	
		
	</security:authentication-manager>

	<bean id="loginService" class="com.bs.spring.security.SecurityService"/>
	<context:component-scan base-package="com.bs.spring"/>		

	
</beans>
